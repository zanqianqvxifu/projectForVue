{
  "_args": [
    [
      {
        "raw": "inject-loader@^2.0.1",
        "scope": null,
        "escapedName": "inject-loader",
        "name": "inject-loader",
        "rawSpec": "^2.0.1",
        "spec": ">=2.0.1 <3.0.0",
        "type": "range"
      },
      "/Users/zanqianqvxifu/Desktop/毕设/Zhihu-Daily-Vue.js"
    ]
  ],
  "_from": "inject-loader@>=2.0.1 <3.0.0",
  "_id": "inject-loader@2.0.1",
  "_inCache": true,
  "_location": "/inject-loader",
  "_nodeVersion": "0.10.36",
  "_npmUser": {
    "name": "justinmorris",
    "email": "desk+npm@pixelbloom.com"
  },
  "_npmVersion": "2.10.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "inject-loader@^2.0.1",
    "scope": null,
    "escapedName": "inject-loader",
    "name": "inject-loader",
    "rawSpec": "^2.0.1",
    "spec": ">=2.0.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/inject-loader/-/inject-loader-2.0.1.tgz",
  "_shasum": "1a7b45d60a81610459ac76079c3ce2a654d0dfc7",
  "_shrinkwrap": null,
  "_spec": "inject-loader@^2.0.1",
  "_where": "/Users/zanqianqvxifu/Desktop/毕设/Zhihu-Daily-Vue.js",
  "author": {
    "name": "Justin Morris",
    "email": "desk@pixelbloom.com",
    "url": "http://pixelbloom.com"
  },
  "bugs": {
    "url": "https://github.com/plasticine/inject-loader/issues"
  },
  "dependencies": {
    "loader-utils": "^0.2.3"
  },
  "description": "A Webpack loader for injecting code into modules via their dependancies",
  "devDependencies": {
    "chai": "^1.9.2",
    "coffee-script": "^1.8.0",
    "mocha": "^1.21.4",
    "sinon": "^1.10.3"
  },
  "directories": {},
  "dist": {
    "shasum": "1a7b45d60a81610459ac76079c3ce2a654d0dfc7",
    "tarball": "https://registry.npmjs.org/inject-loader/-/inject-loader-2.0.1.tgz"
  },
  "gitHead": "859eebd2f7135e5b3fc150ad919d72d83398f639",
  "homepage": "https://github.com/plasticine/inject-loader#readme",
  "keywords": [
    "webpack",
    "testing",
    "loader",
    "webpack-loader",
    "inject",
    "mock",
    "mocking"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "justinmorris",
      "email": "desk+npm@pixelbloom.com"
    }
  ],
  "name": "inject-loader",
  "optionalDependencies": {},
  "readme": "# inject-loader\n\n[![Build Status](https://travis-ci.org/plasticine/inject-loader.svg?branch=master)](https://travis-ci.org/plasticine/inject-loader) [![Dependency Status](https://gemnasium.com/plasticine/inject-loader.svg)](https://gemnasium.com/plasticine/inject-loader) [![NPM version](https://badge.fury.io/js/inject-loader.svg)](http://badge.fury.io/js/inject-loader)\n\n\n**A Webpack loader for injecting code into modules via their dependencies**\n\nThis is particularly useful for writing tests where mocking things inside your module-under-test is sometimes necessary before execution.\n\n`inject-loader` was inspired by, and builds upon ideas introduced in [jauco/webpack-injectable](https://github.com/jauco/webpack-injectable).\n\n### Usage\n\n[Documentation: Using loaders](http://webpack.github.io/docs/using-loaders.html)\n\nUse the inject loader by adding `inject!` when you use `require`, this will return a function that can be passed things to inject.\n\nBy default all `require` statements in an injected module will be altered to be replaced with an injector.\n\nThis behaviour can be customised by passing along flags when using the loader to either explicitly include or exclude dependencies from being injected.\n\n### Examples\n\nGiven some code in a module like this:\n\n```javascript\n// MyStore.js\n\nvar Dispatcher = require('lib/dispatcher');\nvar EventEmitter = require('events').EventEmitter;\nvar handleAction = require('lib/handle_action');\n\nDispatcher.register(handleAction, 'MyStore');\n```\n\nYou can manipulate it’s dependencies when you come to write tests as follows:\n\n```javascript\n// If no flags are provided when using the loader then\n// all require statements will be wrapped in an injector\nMyModuleInjector = require('inject!MyStore')\nMyModule = MyModuleInjector({\n  'lib/dispatcher': DispatcherMock,\n  'events': EventsMock,\n  'lib/handle_action': HandleActionMock\n})\n\n// It is also possible to only mock only explicit require\n// statements via passing in their path as a flag\nMyModuleInjector = require('inject?lib/dispatcher!MyStore')\n// only 'lib/dispatcher' is wrapped in an injector\nMyModule = MyModuleInjector({'lib/dispatcher': DispatcherMock})\n\n// this also works for multiple flags & requires\nMyModuleInjector = require('inject?lib/dispatcher&events!MyStore')\n// only 'lib/dispatcher' and 'events' are wrapped in injectors\nMyModule = MyModuleInjector({\n  'lib/dispatcher': DispatcherMock,\n  'events': EventsMock\n})\n\n// you can also explicitly exclude dependencies from being injected\nMyModuleInjector = require('inject?-lib/dispatcher!MyStore')\n// everything except 'lib/dispatcher' is wrapped in an injector\nMyModule = MyModuleInjector({\n  'events': EventsMock,\n  'lib/handle_action': HandleActionMock\n})\n```\n\n## License\n\nMIT (http://www.opensource.org/licenses/mit-license.php)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/plasticine/inject-loader.git"
  },
  "scripts": {
    "test": "mocha --compilers coffee:coffee-script/register"
  },
  "version": "2.0.1"
}
